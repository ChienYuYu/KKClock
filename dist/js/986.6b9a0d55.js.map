{"version":3,"file":"js/986.6b9a0d55.js","mappings":"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","sources":["webpack://kkclock/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://kkclock/./node_modules/core-js/internals/regexp-flags.js","webpack://kkclock/./node_modules/core-js/modules/es.regexp.flags.js","webpack://kkclock/./src/views/KKClock_cart.vue","webpack://kkclock/./src/components/BuyerInfo.vue","webpack://kkclock/./node_modules/vee-validate/dist/vee-validate.esm.js","webpack://kkclock/./src/components/BuyerInfo.vue?1c9d","webpack://kkclock/./src/views/KKClock_cart.vue?e9f1"],"sourcesContent":["var makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar regExpFlags = require('../internals/regexp-flags');\nvar fails = require('../internals/fails');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\nvar RegExp = global.RegExp;\nvar RegExpPrototype = RegExp.prototype;\n\nvar FORCED = DESCRIPTORS && fails(function () {\n  var INDICES_SUPPORT = true;\n  try {\n    RegExp('.', 'd');\n  } catch (error) {\n    INDICES_SUPPORT = false;\n  }\n\n  var O = {};\n  // modern V8 bug\n  var calls = '';\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\n\n  var addGetter = function (key, chr) {\n    // eslint-disable-next-line es-x/no-object-defineproperty -- safe\n    Object.defineProperty(O, key, { get: function () {\n      calls += chr;\n      return true;\n    } });\n  };\n\n  var pairs = {\n    dotAll: 's',\n    global: 'g',\n    ignoreCase: 'i',\n    multiline: 'm',\n    sticky: 'y'\n  };\n\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\n\n  for (var key in pairs) addGetter(key, pairs[key]);\n\n  // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\n\n  return result !== expected || calls !== expected;\n});\n\n// `RegExp.prototype.flags` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\n  configurable: true,\n  get: regExpFlags\n});\n","<template>\n<LoadingPlugin :active=\"isLoading\"></LoadingPlugin>\n<div class=\"container mt-5\">\n  <div class=\"col-12 col-md-10 mx-auto\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">品名</th>\n          <th scope=\"col\">數量</th>\n          <th scope=\"col\">合計</th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"item in carts\" :key=\"item.id\">\n          <td>{{item.product.title}}</td>\n          <td>\n            <div class=\"d-flex col-10 col-md-6 col-lg-3\">\n                  <button class=\"btn btn-sm btn-secondary rounded-0\" type=\"button\"\n                  @click=\"updateCart(item.id, item.qty + 1)\">\n                    <i class=\"bi bi-plus\"></i>\n                  </button>\n                    <input type=\"number\" class=\"form-control rounded-0 px-0 text-center bg-white\"\n                      min=\"1\" id=\"qty\" v-model=\"item.qty\" aria-label=\"qty\"\n                      disabled>\n                  <button class=\"btn btn-sm btn-secondary rounded-0\" type=\"button\"\n                  @click=\"updateCart(item.id, item.qty - 1)\"\n                  :disabled=\"item.qty === 1\">\n                    <i class=\"bi bi-dash\"></i>\n                  </button>\n                </div>\n          </td>\n          <td>${{currency(item.total)}}</td>\n          <td>\n            <!-- 刪除 -->\n            <button type=\"button\" class=\"btn btn-danger btn-sm\"\n            @click=\"deleteCart(item.id)\">\n            <i class=\"bi bi-trash\"></i> </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"border-0\" colspan=\"\">\n          </td>\n        </tr>\n        <tr>\n          <td colspan=\"4\">\n            <div class=\"col-md-8 col-lg-4\">\n              <div class=\"input-group mb-3\">\n                <button\n                  class=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  @click=\"useCouponCode\">\n                  套用優惠碼\n                </button>\n\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"請輸入優惠碼\"\n                  aria-label=\"coupon\"\n                  aria-describedby=\"button-coupon\"\n                  v-model=\"couponCode\">\n              </div>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td colspan=\"4\">\n            <p class=\"text-mygreen text-end px-5\">合計 ${{currency(totalPrice)}}</p>\n            <p class=\"text-myorange text-end px-5\">\n              優惠券折扣 ${{currency(Math.round(totalPrice - finalPrice))}}</p>\n            <p class=\"text-myred text-end px-5\">\n              總計 ${{currency(Math.round(finalPrice))}}</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n    <BuyerInfo></BuyerInfo>\n</div>\n</template>\n\n<script>\nimport BuyerInfo from '../components/BuyerInfo.vue';\n\nexport default {\n  components: {\n    BuyerInfo,\n  },\n  data() {\n    return {\n      carts: [],\n      totalPrice: 0,\n      finalPrice: 0,\n      couponCode: '',\n      isLoading: false,\n    };\n  },\n  inject: ['emitter', 'currency'],\n  methods: {\n    getCarts() {\n      const api = `${process.env.VUE_APP_API}api/${process.env.VUE_APP_PATH}/cart`;\n      this.isLoading = true;\n      this.axios.get(api).then((res) => {\n        this.isLoading = false;\n        this.carts = res.data.data.carts;\n        this.totalPrice = res.data.data.total;\n        this.finalPrice = res.data.data.final_total;\n      });\n    },\n    updateCart(id, num) {\n      const cart = { data: { product_id: id, qty: num } };\n      const api = `${process.env.VUE_APP_API}api/${process.env.VUE_APP_PATH}/cart/${id}`;\n      this.axios.put(api, cart).then(() => {\n        this.getCarts();\n      });\n    },\n    deleteCart(id) {\n      const api = `${process.env.VUE_APP_API}api/${process.env.VUE_APP_PATH}/cart/${id}`;\n      this.axios.delete(api).then(() => {\n        this.getCarts();\n        this.emitter.emit('updateData');\n      });\n    },\n    useCouponCode() {\n      const api = `${process.env.VUE_APP_API}api/${process.env.VUE_APP_PATH}/coupon`;\n      this.axios.post(api, { data: { code: this.couponCode } }).then(() => {\n        this.getCarts();\n      });\n    },\n  },\n  beforeCreate() {\n    document.title = this.$route.meta.title;\n  },\n  created() {\n    this.getCarts();\n  },\n  mounted() {\n    this.emitter.on('updateData', () => {\n      this.getCarts();\n    });\n  },\n};\n</script>\n","<template>\n  <div class=\"col-12 col-md-10 col-lg-6 mx-auto border p-4 my-5\">\n    <Form @submit=\"createOrder\" v-slot=\"{ errors }\">\n      <h2 class=\"mb-3\">請填寫訂購資料 <span class=\"ms-3 h6 text-danger\">*必填</span></h2>\n      <div class=\"mb-3\">\n        <label for=\"email\" name=\"email\" class=\"form-label w-100\"\n          >Email*\n          <Field\n            :rules=\"validateEmail\"\n            :class=\"{ 'is-invalid': errors['email'] }\"\n            type=\"email\"\n            class=\"form-control mt-2\"\n            id=\"email\"\n            name=\"email\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"請輸入Email\"\n            v-model=\"form.user.email\"\n          >\n          </Field>\n          <ErrorMessage name=\"email\" class=\"text-danger\" />\n        </label>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label w-100\"\n          >收件人姓名*\n          <Field\n            :rules=\"validateName\"\n            :class=\"{ 'is-invalid': errors['name'] }\"\n            type=\"text\"\n            class=\"form-control mt-2\"\n            name=\"name\"\n            id=\"name\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"請輸入收件人姓名\"\n            v-model=\"form.user.name\"\n          >\n          </Field>\n          <ErrorMessage name=\"name\" class=\"text-danger\" />\n        </label>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"phone\" class=\"form-label w-100\"\n          >收件人電話*\n          <Field\n            :rules=\"validateTel\"\n            :class=\"{ 'is-invalid': errors['phone'] }\"\n            type=\"tel\"\n            class=\"form-control mt-2\"\n            id=\"phone\"\n            name=\"phone\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"請輸入手機ex 0912345678\"\n            v-model=\"form.user.tel\"\n          >\n          </Field>\n          <ErrorMessage name=\"phone\" class=\"text-danger\" />\n        </label>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"address\" class=\"form-label w-100\"\n          >收件人地址*\n          <Field\n            :rules=\"validateAddress\"\n            :class=\"{ 'is-invalid': errors['address'] }\"\n            type=\"text\"\n            class=\"form-control mt-2\"\n            id=\"address\"\n            name=\"address\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"請輸入收件人地址\"\n            v-model=\"form.user.address\"\n          >\n          </Field>\n          <ErrorMessage name=\"address\" class=\"text-danger\" />\n        </label>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"message\" class=\"form-label w-100\">\n          留言\n          <Field\n            name=\"message\"\n            id=\"message\"\n            class=\"form-control mt-2\"\n            v-model=\"form.message\"\n          ></Field>\n        </label>\n      </div>\n      <button type=\"submit\" class=\"btn btn-danger\">送出訂單 & 付款去</button>\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { Form, Field, ErrorMessage } from 'vee-validate';\n\nexport default {\n  components: {\n    Form,\n    Field,\n    ErrorMessage,\n  },\n  inject: ['emitter'],\n  data() {\n    return {\n      form: {\n        user: {\n          name: '',\n          email: '',\n          tel: '',\n          address: '',\n        },\n        message: '',\n      },\n      orderId: '',\n    };\n  },\n  methods: {\n    createOrder() {\n      const api = `${process.env.VUE_APP_API}api/${process.env.VUE_APP_PATH}/order`;\n      const order = this.form;\n      this.axios.post(api, { data: order }).then((res) => {\n        if (res.data.success) {\n          console.log('createOrder', res);\n          this.emitter.emit('updateData');\n          this.orderId = res.data.orderId;\n          this.$router.push(`checkout/${this.orderId}`);\n        }\n      });\n    },\n    // 表單驗證規則----------------\n    validateEmail(value) {\n      if (!value) {\n        return '這是必填欄位';\n      }\n\n      // if the field is not a valid email\n      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n      if (!regex.test(value)) {\n        return '此字段必須是有效的電子郵件';\n      }\n      return true;\n    },\n    validateName(value) {\n      if (!value) {\n        return '這是必填欄位';\n      }\n      return true;\n    },\n    validateTel(value) {\n      if (!value) {\n        return '這是必填欄位';\n      }\n      const phoneNumber = /^(09)[0-9]{8}$/;\n      if (!phoneNumber.test(value)) {\n        return '需要正確的手機號碼格式';\n      }\n      return true;\n    },\n    validateAddress(value) {\n      if (!value) {\n        return '這是必填欄位';\n      }\n      return true;\n    },\n  },\n};\n</script>\n","/**\n  * vee-validate v4.6.2\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\r\nfunction applyModelModifiers(value, modifiers) {\r\n    if (!isObject(modifiers)) {\r\n        return;\r\n    }\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        const files = Array.from(input.files);\r\n        return input.multiple ? files : files[0];\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function or chain of generic functions\r\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        // Normalize the pipeline\r\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\r\n        const length = pipeline.length;\r\n        const errors = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const rule = pipeline[i];\r\n            const result = await rule(value, ctx);\r\n            const isValid = typeof result !== 'string' && result;\r\n            if (isValid) {\r\n                continue;\r\n            }\r\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n            errors.push(message);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm = true) {\r\n    const form = shouldInjectForm === true ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue, true);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, keepValueOnUnmount, modelPropName, syncVModel, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    // a flag indicating if the field is about to be removed/unmounted.\r\n    let markedForRemoval = false;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    if (syncVModel) {\r\n        useVModel({ value, prop: modelPropName, handleChange });\r\n    }\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n            result.errors = [];\r\n        }\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n        }\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    function handleChange(e, shouldValidate = true) {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    }\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, (val, oldVal) => {\r\n            if (es6(val, oldVal)) {\r\n                return;\r\n            }\r\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\r\n            validateFn();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        keepValueOnUnmount,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        markedForRemoval = true;\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n        keepValueOnUnmount: undefined,\r\n        modelPropName: 'modelValue',\r\n        syncVModel: true,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a;\r\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\r\nfunction useVModel({ prop, value, handleChange }) {\r\n    const vm = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!vm) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\r\n        }\r\n        return;\r\n    }\r\n    const propName = prop || 'modelValue';\r\n    const emitName = `update:${propName}`;\r\n    // Component doesn't have a model prop setup (must be defined on the props)\r\n    if (!(propName in vm.props)) {\r\n        return;\r\n    }\r\n    watch(value, newValue => {\r\n        if (es6(newValue, getCurrentModelValue(vm, propName))) {\r\n            return;\r\n        }\r\n        vm.emit(emitName, newValue);\r\n    });\r\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\r\n        if (propValue === IS_ABSENT && value.value === undefined) {\r\n            return;\r\n        }\r\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\r\n        if (es6(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\r\n            return;\r\n        }\r\n        handleChange(newValue);\r\n    });\r\n}\r\nfunction getCurrentModelValue(vm, propName) {\r\n    return vm.props[propName];\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        keepValue: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const keepValue = toRef(props, 'keepValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n            keepValueOnUnmount: keepValue,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\r\n            handleChange(e, shouldValidate);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = function handleInputWithModel(e) {\r\n            handleInput(e);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                attrs.value = value.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    var _a;\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // field arrays managed by this form\r\n    const fieldArrays = [];\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArrays,\r\n        keepValuesOnUnmount,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n        useFieldModel,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    function mutateAllFields(mutation) {\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, mutation);\r\n        });\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        fieldArrays.forEach(f => f && f.reset());\r\n    }\r\n    function createModel(path) {\r\n        const { value } = _useFieldValue(path);\r\n        watch(value, () => {\r\n            if (!fieldExists(unref(path))) {\r\n                validate({ mode: 'validated-only' });\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    function useFieldModel(path) {\r\n        if (!Array.isArray(path)) {\r\n            return createModel(path);\r\n        }\r\n        return path.map(createModel);\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        // avoid resetting the field values, because they should've been reset already.\r\n        mutateAllFields(f => f.resetField());\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        const fieldInstance = fieldsByPath.value[fieldName];\r\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\r\n        removeFieldFromPath(field, fieldName);\r\n        // clears a field error on unmounted\r\n        // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n        nextTick(() => {\r\n            var _a;\r\n            const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\r\n            const currentGroupValue = getFromPath(formValues, fieldName);\r\n            // The boolean here is we check if the field still belongs to the same control group with that name\r\n            // if another group claimed the name, we should avoid handling it since it is no longer the same group\r\n            // this happens with `v-for` over some checkboxes and field arrays.\r\n            // also if the group no longer exist we can assume this group was the last one that controlled it\r\n            const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\r\n            // group field that still has a dangling value, the field may exist or not after it was removed.\r\n            // This used to be handled in the useField composable but the form has better context on when it should/not happen.\r\n            // if it does belong to it that means the group still exists\r\n            // #3844\r\n            if (isSameGroup && Array.isArray(currentGroupValue) && !shouldKeepValue) {\r\n                const valueIdx = currentGroupValue.findIndex(i => es6(i, unref(field.checkedValue)));\r\n                if (valueIdx > -1) {\r\n                    const newVal = [...currentGroupValue];\r\n                    newVal.splice(valueIdx, 1);\r\n                    setFieldValue(fieldName, newVal, { force: true });\r\n                }\r\n            }\r\n            // Field was removed entirely, we should unset its path\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                // Checks if the field was configured to be unset during unmount or not\r\n                // Checks both the form-level config and field-level one\r\n                // Field has the priority if it is set, otherwise it goes to the form settings\r\n                if (shouldKeepValue) {\r\n                    return;\r\n                }\r\n                if (isGroup && !isEmptyContainer(getFromPath(formValues, fieldName))) {\r\n                    return;\r\n                }\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        mutateAllFields(f => (f.meta.validated = true));\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value, updateOriginal = false) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n        if (updateOriginal) {\r\n            setInPath(originalInitialValues.value, path, klona(value));\r\n        }\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n     */\r\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\r\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await (mode === 'silent' ? debouncedSilentValidation() : debouncedValidation());\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n        useFieldModel,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        keepValues: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const keepValues = toRef(props, 'keepValues');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n            keepValuesOnUnmount: keepValues,\r\n        });\r\n        const submitForm = handleSubmit((_, { evt }) => {\r\n            if (isFormSubmitEvent(evt)) {\r\n                evt.target.submit();\r\n            }\r\n        }, props.onInvalidSubmit);\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields,\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n        move: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\r\n    if (alreadyExists) {\r\n        return alreadyExists;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed({\r\n                get() {\r\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    return idx === -1 ? value : currentValues[idx];\r\n                },\r\n                set(value) {\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    if (idx === -1) {\r\n                        warn(`Attempting to update a non-existent array item`);\r\n                        return;\r\n                    }\r\n                    update(idx, value);\r\n                },\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function move(oldIdx, newIdx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\r\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\r\n            return;\r\n        }\r\n        const newFields = [...fields.value];\r\n        const movedItem = newFields[oldIdx];\r\n        newFields.splice(oldIdx, 1);\r\n        newFields.splice(newIdx, 0, movedItem);\r\n        const movedValue = newValue[oldIdx];\r\n        newValue.splice(oldIdx, 1);\r\n        newValue.splice(newIdx, 0, movedValue);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    const fieldArrayCtx = {\r\n        fields,\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n        move,\r\n    };\r\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\r\n    onBeforeUnmount(() => {\r\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\r\n        if (idx >= 0) {\r\n            form.fieldArrays.splice(idx, 1);\r\n        }\r\n    });\r\n    return fieldArrayCtx;\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n                move,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n            move,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n","import { render } from \"./BuyerInfo.vue?vue&type=template&id=9fb194fa\"\nimport script from \"./BuyerInfo.vue?vue&type=script&lang=js\"\nexport * from \"./BuyerInfo.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\C\\\\Desktop\\\\vueClock\\\\kkclock\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./KKClock_cart.vue?vue&type=template&id=6b99ae33\"\nimport script from \"./KKClock_cart.vue?vue&type=script&lang=js\"\nexport * from \"./KKClock_cart.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\C\\\\Desktop\\\\vueClock\\\\kkclock\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["makeBuiltIn","defineProperty","module","exports","target","name","descriptor","get","getter","set","setter","f","anObject","that","this","result","hasIndices","global","ignoreCase","multiline","dotAll","unicode","unicodeSets","sticky","DESCRIPTORS","defineBuiltInAccessor","regExpFlags","fails","RegExp","RegExpPrototype","prototype","FORCED","INDICES_SUPPORT","error","O","calls","expected","addGetter","key","chr","Object","pairs","getOwnPropertyDescriptor","call","configurable","class","_createElementVNode","scope","_hoisted_7","_hoisted_11","_hoisted_14","colspan","_createVNode","_component_LoadingPlugin","active","$data","_hoisted_4","_createElementBlock","_Fragment","_renderList","item","id","_toDisplayString","product","title","type","onClick","$options","qty","min","$event","disabled","total","_hoisted_16","placeholder","Math","round","_component_BuyerInfo","for","_component_Form","onSubmit","errors","_hoisted_2","_component_Field","rules","user","email","_component_ErrorMessage","tel","address","message","_hoisted_18","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","resolveRule","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isYupValidator","validate","hasCheckedAttr","isContainerValue","isEmptyContainer","length","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","i","unset","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","getCurrentInstance","provides","inject","warn","warn$1","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","forEach","r","Promise","resolve","applyModelModifiers","modifiers","number","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","selectedOption","find","normalizeRules","writable","enumerable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","field","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","async","shouldBail","formData","values","_validate","valid","validateFieldWithYup","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","validator","opts","abortEarly","then","catch","err","Error","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","klona","x","k","list","tmp","str","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","ref","unref","resolveInitialValue","initialValues","setFieldInitialValue","computed","stageInitialValue","setFieldValue","reactive","pending","validated","dirty","watch","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","API","nextTick","sendInspectorState","INSPECTOR_ID","sendInspectorTree","useField","useCheckboxField","_useField","validateOnMount","label","validateOnValueUpdate","keepValueOnUnmount","modelPropName","syncVModel","normalizeOptions","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","oldVal","validateFn","deep","resetField","setValue","onMounted","handleReset","provide","isRef","oldValue","register","onBeforeUnmount","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","propName","emitName","props","getCurrentModelValue","emit","propValue","modelModifiers","FieldImpl","defineComponent","inheritAttrs","as","String","required","Function","keepValue","setup","toRef","validateField","onChangeHandler","handleInput","onInputHandler","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","resolveDynamicComponent","children","h","_d","Field","FORM_COUNTER","useForm","formId","RESET_LOCK","fieldsByPath","isSubmitting","submitCount","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","keepValuesOnUnmount","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","resetForm","handleSubmit","unsetInitialValue","useFieldModel","isFieldGroup","applyFieldMutation","mutation","mutateAllFields","fields","force","fieldInstance","clonedValue","createModel","insertFieldAtPath","rawField","markRaw","fieldPath","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","isGroup","shouldKeepValue","currentGroupValue","isSameGroup","valueIdx","validation","every","onValidationError","preventDefault","stopPropagation","returnVal","updateOriginal","_validateSchema","schemaValue","formResult","debouncedSilentValidation","debouncedValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","watchEffect","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","ErrorMessageImpl","role","ErrorMessage","components","data","orderId","methods","createOrder","api","order","axios","post","res","success","console","log","emitter","$router","validateEmail","regex","validateName","validateTel","phoneNumber","validateAddress","__exports__","BuyerInfo","carts","totalPrice","finalPrice","couponCode","isLoading","getCarts","final_total","updateCart","num","cart","product_id","put","deleteCart","delete","useCouponCode","code","beforeCreate","document","$route","created","mounted","on","render"],"sourceRoot":""}